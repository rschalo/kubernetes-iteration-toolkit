# this is the pipeline

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: singlecluster-run
  namespace: tekton-pipelines
spec:
  workspaces:
    - name: source
    - name: results
    - name: kubeconfig
  params:
  - name: first-control-plane-name
    description: The name of the first test cluster.
    default: "first"
  - name: kubernetes-version
    description: The version of the kubernetes management cluster.
    default: "1.25"
  - name: first-control-plane-api-server-count
    description: Number of instances in the api server ASG in the first cluster
    default: "2"
  - name: monitoring-node-instance-types
    default: |
      ["m5.4xlarge"]
  - name: monitoring-node-selectors
    default: 'node.kubernetes.io/instance-type=m5.4xlarge'
    description: The selectors to select the monitoring node for tainting.
  - name: giturl
    description: "git url to clone the package"
    default: https://github.com/kubernetes/perf-tests.git
  - name: cl2-branch
    description: "The branch of clusterloader2 you want to use"
    default: "master"
  - name: pods-per-node
    description: "pod density"
    default: "15"
  - name: nodes-per-namespace
    description:  "nodes per namespace to get created for load test "
    default: "10"
  - name: cl2-load-test-throughput
    description: "throughput used for mutate operations"
    default: "15"
  - name: amp-workspace-id
    description: "The AMP workspace ID where remote write needs to happen."
  - name: "node_count"
    description: "Number of nodes in the dataplane"
    default: "10"
  - name: results-bucket
    description: "Results bucket with path of s3 to upload results"

  tasks:
  - name: first-control-plane-setup
    taskRef:
      name: control-plane-setup
    params:
      - name: name
        value: '$(params.first-control-plane-name)'
      - name: kubernetes-version
        value: '$(params.kubernetes-version)'
      - name: apiserver-replicas
        value: '$(params.first-control-plane-api-server-count)'

  - name: setup-first-monitoring-node
    runAfter: [first-control-plane-setup]
    taskRef:
      kind: Task
      name: data-plane-setup
    params:
      - name: cluster-name
        value: '$(params.first-control-plane-name)'
      - name: dataplane-name
        value: 'monitoring-$(params.first-control-plane-name)-nodes'
      - name: node-count
        value: '1'
      - name: instance-types
        value: '$(params.monitoring-node-instance-types)'

  - name: label-and-taint-first-monitoring-node
    runAfter: [setup-first-monitoring-node]
    taskRef:
      kind: Task
      name: label-and-taint-node
    params:
      - name: cluster-name
        value: '$(params.first-control-plane-name)'
      - name: selectors
        value: '$(params.monitoring-node-selectors)'
      - name: taint
        value: 'monitoring=true:NoSchedule'
      # We add another label to ensure Prometheus stack only run on the dedicated node in
      # https://github.com/awslabs/kubernetes-iteration-toolkit/blob/e95b99e09e89f23a4aa8162632ba78b6c351dec5/tests/tasks/generators/clusterloader/load.yaml#L84
      - name: labels
        value: 'eks.amazonaws.com/nodegroup=monitoring-$(params.first-control-plane-name)-nodes-1'

  - name: setup-first-data-plane
    runAfter: [label-and-taint-first-monitoring-node]
    taskRef:
      name: data-plane-setup
    params:
      - name: cluster-name
        value: '$(params.first-control-plane-name)'
      - name: node-count
        value: '$(params.node_count)'

  - name: create-first-storage-class-step
    runAfter: [setup-first-data-plane]
    taskRef:
      name: create-storageclass
    params:
      - name: cluster-name
        value: '$(params.first-control-plane-name)'

  - name: load-first-dataplane
    runAfter: [create-first-storage-class-step]
    taskRef:
      kind: Task
      name: load
    params:
      - name: cluster-name
        value: '$(params.first-control-plane-name)'
      - name: cl2-branch
        value: '$(params.cl2-branch)'
      - name: giturl
        value: '$(params.giturl)'
      - name: pods-per-node
        value: '$(params.pods-per-node)'
      - name: nodes-per-namespace
        value: '$(params.nodes-per-namespace)'
      - name: cl2-load-test-throughput
        value: '$(params.cl2-load-test-throughput)'
      - name: results-bucket
        value: '$(params.results-bucket)-cluster-A'
      - name: nodes
        value: '$(params.node_count)'
      - name: amp-workspace-id
        value: '$(params.amp-workspace-id)'
    workspaces:
      - name: source
        workspace: source
      - name: results
        workspace: results
      - name: kubeconfig
        workspace: kubeconfig

  - name: teardown-first-control-plane
    runAfter: [load-first-dataplane]
    taskRef:
      name: teardown
    params:
      - name: name
        value: '$(params.first-control-plane-name)'
